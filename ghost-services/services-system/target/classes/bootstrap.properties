server.port=18002

spring.application.name=services-system

spring.cloud.nacos.discovery.server-addr=${NACOS_URL:47.100.163.55:8848}
spring.cloud.nacos.discovery.namespace=${NACOS_NAMESPACE:ghost-dev}
spring.cloud.nacos.discovery.username=${NACOS_USERNAME:nacos}
spring.cloud.nacos.discovery.password=${NACOS_PASSWORD:nacos}

spring.cloud.nacos.config.server-addr=${NACOS_URL:47.100.163.55:8848}
spring.cloud.nacos.config.namespace=${NACOS_NAMESPACE:ghost-dev}
spring.cloud.nacos.config.username=${NACOS_USERNAME:nacos}
spring.cloud.nacos.config.password=${NACOS_PASSWORD:nacos}
spring.cloud.nacos.config.file-extension=properties
spring.cloud.nacos.config.shared-configs[0].data-id=ghost-common.properties
spring.cloud.nacos.config.shared-configs[0].refresh=true


# Token签发地址(认证服务地址)
spring.security.oauth2.client.provider.custom-issuer.issuer-uri=http://localhost:18001
# 获取用户信息的地址，默认的/userinfo端点需要IdToken获取，为避免麻烦自定一个用户信息接口
spring.security.oauth2.client.provider.custom-issuer.token-info-uri=${spring.security.oauth2.client.provider.custom-issuer.issuer-uri}/user
# oauth认证提供者配置，和上边配置的认证提供者关联起来
spring.security.oauth2.client.provider.registration.messaging-client-oidc.provider=custom-issuer
# 客户端名称，自定义
spring.security.oauth2.client.provider.registration.messaging-client-oidc.client-name=messaging-client
# 客户端id，从认证服务申请的客户端id
spring.security.oauth2.client.provider.registration.messaging-client-oidc.client-id=messaging-client
# 客户端秘钥
spring.security.oauth2.client.provider.registration.messaging-client-oidc.client-secret=123456
# 客户端认证方式
spring.security.oauth2.client.provider.registration.messaging-client-oidc.client-authentication-method=client_secret_basic
# 获取Token使用的授权流程
spring.security.oauth2.client.provider.registration.messaging-client-oidc.authorization-grant-type=authorization_code
# 回调地址，这里设置为Spring Security Client默认实现使用code换取token的接口
spring.security.oauth2.client.provider.registration.messaging-client-oidc.redirect-uri=http://localhost:18002/login/oauth2/code/messaging-client-oidc
spring.security.oauth2.client.provider.registration.messaging-client-oidc.scope[0]=message.read
spring.security.oauth2.client.provider.registration.messaging-client-oidc.scope[1]=message.write
